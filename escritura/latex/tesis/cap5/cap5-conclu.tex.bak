\fancyhf{}
\pagestyle{fancy}
%Encabezado
\lhead[]{\leftmark}
\chead[]{}
\rhead[]{\thepage}
\renewcommand{\headrulewidth}{1pt}

El correspondiente trabajo final de Licenciatura en Ciencias de la Computación, en los primeros 3 capítulos se explicaron conceptos relacionados a la temática de Comprensión de Programas (CP) y Análisis de Identificadores. El objetivo del estudio de estos temas se encuentra enmarcado en ubicar al lector en el contexto de estas temáticas y además brindar un estado de arte acorde a las mismas. 
A partir del estudio del estado del arte de las técnicas de análisis de ids, se detectó que no todas estas técnicas están implementadas en herramientas automáticas. Construir una herramienta con tales características facilitaría entender el propósito de los ids en los códigos y por ende esta construcción es un aporte directo al área de la CP. Teniendo en cuenta esta ausencia de implementaciones, se llevó a cabo el desarrollo de una herramienta que a través de una interfaz amigable le ayude al usuario a analizar los ids presentes en los códigos a través de las técnicas estudiadas. En los próximos párrafos se explican los resultados obtenidos a partir de la construcción de la herramienta antedicha.

\section{Análisis sobre IDA (Identifier Analizer)} 

%La motivación de desarrollar la herramienta IDA, esta dada por la ausencia de herramientas con similares características. No abundan herramientas que posean interfaz amigable con el usuario y ejecuten técnicas que analicen ids de un código pasado entrada. Tampoco existen muchas implementaciones que extraigan ids, dividan ids y expandan abreviaturas en nombres de ids. 

Se ha elaborado una herramienta IDA (Identifier Analizer), la misma permite extraer con facilidad los elementos estáticos presentes en los códigos escritos en JAVA. Estos elementos son, los ids como objetos principales y luego los comentarios, literales. IDA captura estos elementos por medio de un Analizador Sintáctico (AS). 
Debido a la complejidad que demanda construir este tipo de AS, para acotar las tareas en el desarrollo del mismo, unicamente se programó al AS para que extraiga los ids en su punto de declaración (Ejemplo: int i;)  y no en la referencias del mismo (Ejemplo: i=i+1;). En el caso de los comentarios y literales, el AS los extrae en forma completa.

Una vez que IDA captura los elementos descriptos en el párrafo anterior, a continuación IDA le permite al usuario escoger entre dos técnicas de división de ids:

\begin{description}

\item[Algoritmo de Greedy:] Esta técnica divide recursivamente al id. Lo realiza con dos procesos uno comenzando desde el principio del id y el otro desde el final. Luego cada uno va tomando de a un carácter en forma progresiva y consultando si esa porción de la palabra pertenece a algún diccionario. En caso de ser afirmativo, procede a separarla del resto y continuar con el análisis. El proceso que mayor divisiones tenga será escogido como resultado final (ver capítulo 3 - sección \ref{sec:algGre}).

\item[Algoritmo Samurai:] Es similar a la técnica Greedy, salvo que en este algoritmo se utilizan tablas de frecuencias de aparición de palabras, en lugar de diccionarios, las mismas son más precisas y ocupan menos espacio. Estas tablas son consultadas por una función de score y a través de esta se determina si una porción del id debe separarse o no. 
De manera recursiva se van tomando de a dos partes el id, luego la función de score le dará un puntaje a cada parte, si es lo suficientemente alto se procederá a dividir entre ambas partes, sino continua analizando (ver capítulo 3 - sección \ref{sec:algSamu}).

\end{description}

Una vez que fueron divididos los ids, las distintas partes resultantes se someten a un proceso de expansión por medio de una técnica:

\begin{description}
\item[Algoritmo de Expansión Básica:] Este algoritmo se encarga de tomar palabras que resultaron producto de la separación de ids, en caso de que estas palabras estén abreviadas, el algoritmo de expansión las expande a palabras completas, para ello se utilizan los comentarios o literales capturados del código, si los mismos son escasos, se recurre a diccionarios de palabras como último recurso (ver capítulo 3 - sección \ref{sec:algExpBas}).

\end{description}

Una vez que el usuario divide y luego expande los ids con las técnicas antedichas, los resultados se muestran en tablas para que el usuario pueda compararlos. Esta traducción de ids abreviados a palabras completas brindan información sobre los conceptos del Domino del Problema ubicados en el programa analizado. De esta manera, es un aporte al área de la CP en la búsqueda del principal objetivo, que es relacionar el Domino del Problema con el Dominio del Programa.


%Cabe destacar que la herramienta IDA tiene implementada dos técnicas de división, Greedy y Samurai. La primera necesita consultar un diccionario de palabras en Inglés y un listado genérico de abreviaciones conocidas para llevar a cabo sus tareas. Ambas listas ocupan mucho espacio de almacenamiento y se utiliza una base de datos para hacer las consultas más eficientes. 

%En cambio, el algoritmo Samurai divide los ids mediante la utilización de recursos propios del código. Estos recursos son, los comentarios, los literales y documentación JAVA Doc que son extraídos mediante el parser antes mencionado. Con estos recursos, se arma un listado de frecuencias de aparición de palabras que son usadas en la función de scoring (ver sección nn). Por otro lado, suele ocurrir que estos recursos son escasos, por ende los autores decidieron armar un listado de palabras perteneciente a un conjunto amplio de programas escritos en JAVA. Este listado, no solo ocupa menos espacio que los diccionarios de Greedy sino que están constituidos con palabras más adecuadas al ámbito de las ciencias de la computación. Esto implica que la división sea más eficiente y por ende que después la expansión sea más precisa.

%Por otro lado, el algoritmo de expansión básico emplea los mismos diccionarios de palabras que utiliza Greedy, pero con la diferencia que consulta previamente la lista de frases capturadas del código, dando la preferencia a esta lista primero. La lista de frases se arma en función de los comentarios, literales y documentación JAVA Doc extraídos con el parser explicado al principio. Este algoritmo tiene el problema que ante múltiples alternativas de expansión, no sabe elegir una única opción.

\section{Trabajos Futuros}

En esta sección se describen propuestas en lo que respecta a trabajos futuros. Se tomará como puntapié inicial el actual desarrollo de la herramienta IDA, y a continuación se proponen las siguientes mejoras/extensiones:

\begin{itemize}

%\item Mejoras en el Analizador Sintáctico. 
\item Implementar otro Algoritmo de Expansión.
\item Acoplar a entornos de desarrollos.
\item Traducción de Identificadores en Código.

\end{itemize}

%\subsection{Mejoras en el Analizador Sintáctico}

\subsection{Implementar otro Algoritmo de Expansión}

Esta propuesta consiste en implementar una nueva técnica de análisis de ids en IDA, más precisamente un nuevo algoritmo de expansión. El algoritmo es AMAP (Automatically Mining Abbreviation Expansions in Programs) descripto en el capítulo 3 sección \ref{sec:algAmap}. Esta técnica, no necesita de diccionarios con palabras en Inglés como el caso de el algoritmo básico de expansión y observa gradualmente en el código los comentarios y literales presentes partiendo desde el lugar del id que se desea expandir. También, resuelve el problema que posee el algoritmo básico cuando no sabe que opción elegir ante muchas posibilidades de expansión. Para lograrlo esto, el algoritmo prioriza la frecuencia de aparición de las palabras por cercanía de alcance estático partiendo del lugar donde se encuentre el id analizado. También AMAP permite entrenarse con con conjunto de programas pasado como entrada para recopilar más palabras y mejorar aún más la precisión de la expansión.

\subsection{Traducción de Identificadores en Archivo}

Para ubicarse en el contexto de esta mejora, dentro del panel de elementos capturados, más precisamente en donde se muestra el código leído del archivo. Este código resalta con color cuando se seleccionaba un id en la tabla correspondiente (también lo hace con los comentarios y los literales).

Una propuesta de mejora en la herramienta IDA consiste en traducir los ids que se muestran en el panel de elementos capturados. Esta traducción consiste en traducir cada id que se ubica en código por la expansión que fue llevada a cabo, dado que puede existir varias alternativas de expansión por cada id, lo que se permitirá es que el usuario pueda elegir entre las distintas alternativas la que mejor le plazca. De esta forma, se obtendrá un código más legible y guardará los cambios realizados en un nuevo archivo de salida JAVA, este nuevo archivo será funcionalmente equivalente al original.


\subsection{Acoplar a entornos de desarrollos}

Una extensión futura interesante para la herramienta IDA, es la posibilidad de acoplarla como un plugin a un entorno de desarrollo integrado como es el caso de NetBeans o Eclipse. Esto permitiría que el usuario abra un proyecto JAVA e inmediatamente con IDA expanda los ids para mejorar la comprensión. Esta propuesta en parte es similar a la herramienta Identifier Dictionary (IDD), que fue desarrollada por Deissenboeck y Pizka, descripta en el capítulo 3. El plugin de IDD integrado a eclipse, permite al compilar un proyecto en JAVA que automáticamente capture y enumere dentro de una tabla los ids presentes en el proyecto, luego el usuario puede renombrados cada id a una forma más comprensiva.

La herramienta IDA tendría un plugin similar a IDD, solo que el renombre de los ids es automático a palabras más completas, y el usuario solo deberá intervenir para determinar la mejor expansión más precisa.




