/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ExtractID;

import DictionaryDB.Dictionary;
import Listas.Clase;
import Listas.Comentario;
import Listas.ListaClase;
import Listas.Literal;
import VentanasPaneles.AcercaDe;
import VentanasPaneles.ClosableTabbedPane;
import VentanasPaneles.CodigoPanel;
import VentanasPaneles.DiccionaryPanel;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.antlr.runtime.ANTLRStringStream;
import org.antlr.runtime.CommonTokenStream;
import org.jdesktop.swingx.util.OS;

/**
 *
 * @author javier
 */
public class Main extends javax.swing.JFrame {

    private CodigoPanel codigoPanel;

    private static File[] archivosAnalisisId = null;

    private final ClosableTabbedPane jTabbedEsp;

    private Map<String, String> mapIdsSplited;
    private Map<String, String> mapIdsExp;
    
    
    private JFileChooser fileChooser;
    private File currentDir;
    
    private static DiccionaryPanel dicPanel;

    /**
     * Creates new form NewJFrame
     */
    public Main() {
        initComponents();
        
        ListaClase.init();
        
        mapIdsSplited = new HashMap<>();
        mapIdsExp = new HashMap<>();
        
        fileChooser = new JFileChooser();

        jTabbedEsp = new ClosableTabbedPane();

        jTabbedEsp.setFocusable(false);

        jTabbedEsp.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jTabbedEsp, javax.swing.GroupLayout.DEFAULT_SIZE, 907, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jTabbedEsp, javax.swing.GroupLayout.DEFAULT_SIZE, 532, Short.MAX_VALUE)
        );

        jTabbedEsp.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedEspStateChanged(evt);
            }
        });

    }

    public static DiccionaryPanel getDicPanel() {
        return dicPanel;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuAbrir = new javax.swing.JMenuItem();
        jMenuItemCerrTodo = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuRestBD = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Identifier Analyzer");

        jMenu1.setText("Archivo");

        jMenuAbrir.setText("Abrir Archivos...");
        jMenuAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuAbrirActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuAbrir);

        jMenuItemCerrTodo.setText("Cerrar Todo");
        jMenuItemCerrTodo.setEnabled(false);
        jMenuItemCerrTodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCerrTodoActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemCerrTodo);

        jMenuItem3.setText("Salir");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        jMenu3.setText("Diccionarios");

        jMenuItem2.setText("Ver Diccionarios ...");
        jMenuItem2.setEnabled(false);
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem2);

        jMenuRestBD.setText("Restablecer B.D.");
        jMenuRestBD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuRestBDActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuRestBD);

        jMenuBar1.add(jMenu3);

        jMenu4.setText("Ayuda");

        jMenuItem6.setText("Acerca de...");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem6);

        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 837, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 466, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(847, 517));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed

        AcercaDe ad;
        ad = new AcercaDe(new javax.swing.JFrame(), true);

        ad.setVisible(true);

    }//GEN-LAST:event_jMenuItem6ActionPerformed

      
    private void jMenuAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuAbrirActionPerformed

        if(fileChooser.getCurrentDirectory() == null){            
            //si no esta seteado ponemos la carpeta del usuario
            currentDir = new File(System.getProperty("user.home"));
        }
        
        fileChooser.setCurrentDirectory(currentDir);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("java", "java");
        fileChooser.setFileFilter(filter);

        fileChooser.setMultiSelectionEnabled(true);

        int seleccion = fileChooser.showOpenDialog(fileChooser);
        boolean noErrorSintactico = true;

        if (seleccion == JFileChooser.APPROVE_OPTION) {

            //guardamos el ultimo acceso
            currentDir = fileChooser.getCurrentDirectory();
            
            //jMenuItem1.setEnabled(false);
            jMenuItemCerrTodo.setEnabled(true);

            archivosAnalisisId = fileChooser.getSelectedFiles();            

            for (File fileAnalisis : archivosAnalisisId) {
                
                if(ListaClase.containsFileName(fileAnalisis.getName())){
                    JOptionPane.showMessageDialog(new JFrame(),
                            "Un archivo con el nombre: " + fileAnalisis.getName()
                            + " ya se encuentra abierto!"
                            , "Atención", JOptionPane.WARNING_MESSAGE);
                    continue;
                }

                //jacobe para dar formato al codigo leido desde el archivo
                String prettyCode = prettyCode(fileAnalisis.getAbsolutePath());

                if (prettyCode.isEmpty()) {
                    JOptionPane.showMessageDialog(new JFrame(),
                            "El archivo: " + fileAnalisis.getName()
                            + " esta vacío o posee errores sintácticos,"+
                                    "\nrevíselo e intente de nuevo."
                            , "Atención", JOptionPane.WARNING_MESSAGE);
                    continue;
                }
                ///////////////
                
                
                JavaLexer lex = new JavaLexer(new ANTLRStringStream(prettyCode));
                CommonTokenStream tokens = new CommonTokenStream(lex);
                JavaParser g = new JavaParser(tokens);

                try {
                    g.compilationUnit();
                    noErrorSintactico = g.ocurrioError();
                    
                } catch (Exception e) {

                    System.out.println(getStackTrace(e));
                    noErrorSintactico = false;
                }                

                Clase unaClase = g.getClaseAnalisis();                
                
                //control de carga de datos del parser
                if (!noErrorSintactico || unaClase==null) {
                    JOptionPane.showMessageDialog(new JFrame(),
                            "Error fatal al analizar archivo: " + fileAnalisis.getName(), "ERROR", JOptionPane.ERROR_MESSAGE);
                    continue;
                }
                
                //control de referencias sin declarar
                if (unaClase.getVarSinDeclB()) {
                    JOptionPane.showMessageDialog(new JFrame(),
                            "Error al analizar archivo: " + fileAnalisis.getName()+
                            "\n"+unaClase.getVarSinDecl() , "ERROR", JOptionPane.ERROR_MESSAGE);
                    continue;
                }
                ////////
                
                unaClase.setFileName(fileAnalisis.getName());//nombre archivo java
                unaClase.setCode(prettyCode);//codigo leido de archivo
                /////comentarios/////
                ArrayList<Comentario> lisCom = lex.getLisCom(); //comentarios del lexer 
                unaClase.setLisComentario(lisCom);
                unaClase.setearAmbienteCometario();//seteo ambientes de comentarios
                unaClase.cargarTablaClase();//cargo elementos para las tablas
                unaClase.setLisLiterales(g.getLisLiterales());
                /////////////////////
                ListaClase.addElemLisClases(unaClase);
                
                
                //Interfaz
                codigoPanel = new CodigoPanel(unaClase, mapIdsSplited, mapIdsExp);
                //jTabbedPaneCodigo.add(claseAnalisis.getPunteroArchivo().getName(), codigoPanel);
                jTabbedEsp.addTab(unaClase.getFileName(), codigoPanel); 

            }

            //jTabbedPaneAnalisis.add("Identificadores", new TablaBuscador(0));
            //jTabbedPaneAnalisis.add("Literales", new TablaBuscador(1));
            //jTabbedPaneAnalisis.add("Comentarios", new TablaBuscador(2));
            //jTabbedPaneCodigo.setVisible(true);
            jTabbedEsp.setVisible(true);
            jMenuItem3.setEnabled(true);
            jMenuItem2.setEnabled(true);
            jMenuItem2.setEnabled(true);

            //jMenuItem4.setEnabled(true);
        }

    }//GEN-LAST:event_jMenuAbrirActionPerformed

    public static String getStackTrace(final Throwable throwable) {
        final StringWriter sw = new StringWriter();
        final PrintWriter pw = new PrintWriter(sw, true);
        throwable.printStackTrace(pw);
        return sw.getBuffer().toString();
    }
    
    
    private String prettyCode(String path) {

        String output = "";

        try {
            
            BufferedReader reader = null;
            
            String dir;
            
            if(isLinux()){
                dir = "jacobe//unix//jacobe";            
            }else if(isWindows()){
                dir = "/jacobe/win/jacobe";            
            }else{
                System.out.println("jacobe: No se reconoce el SO");
                return "";
            }

            Process p = Runtime.getRuntime().exec(new String[]{dir, "-cfg=sun.cfg", path, "-stdout"});

            reader = new BufferedReader(new InputStreamReader(p.getInputStream()));

            p.waitFor();
            String line = "";

            while ((line = reader.readLine()) != null) {
                output += line + "\n";
            }

        } catch (IOException | InterruptedException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }

        return output;

    }
    
    public static boolean isWindows() {

        return (OS.isWindows());
    }
    
    public static boolean isLinux() {

            return (OS.isLinux());

    }


    private void jMenuItemCerrTodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCerrTodoActionPerformed

        ListaClase.clear();//remueve logica
        jTabbedEsp.removeAll();//remueve interfaz
        jMenuItemCerrTodo.setEnabled(false);

    }//GEN-LAST:event_jMenuItemCerrTodoActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem3ActionPerformed
    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed

        if(dicPanel == null){
            dicPanel = new DiccionaryPanel(new javax.swing.JFrame(), true);
        }
        
        dicPanel.setVisible(true);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuRestBDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuRestBDActionPerformed
        
        
      
        Dictionary.restartBd();       
        
        
        
    }//GEN-LAST:event_jMenuRestBDActionPerformed

    private void jTabbedEspStateChanged(javax.swing.event.ChangeEvent evt) {

        if (jTabbedEsp.getTabCount() == 0) {
            jMenuItemCerrTodo.setEnabled(false);

        } else {
            jMenuItemCerrTodo.setEnabled(true);
        }
        
        if(dicPanel != null){
            dicPanel.rebuildPhraseList();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Main principal = new Main();
                principal.setVisible(true);

                principal.setExtendedState(JFrame.MAXIMIZED_BOTH);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuItem jMenuAbrir;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItemCerrTodo;
    private javax.swing.JMenuItem jMenuRestBD;
    // End of variables declaration//GEN-END:variables
}
